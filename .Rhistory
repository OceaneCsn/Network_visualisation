suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(psych, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./DEFunctions.R")
source("./Network_functions.R")
specie = "At"
net <- PLN_network(data = data, DEGenes = sample_genes)
#V(net)$size <- degree[V(net)]*0.1
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.width = 0.5)
V(net)$color <- clusteredGenes[V(net)]
#V(net)$size <- degree[V(net)]*0.1
plot.igraph(net, vertex.size = 10, vertex.label.cex = 0.4, edge.width = 0.5)
save(net, file = "Nitrate_igraph_network.RData")
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
#setwd("~/Documents/CombinatoireFeNCO2/Combinatoire/")
setwd("./")
library(corrplot)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(igraph, warn.conflicts = F, quietly = T))
library(networkD3)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net) %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
plot.igraph(net, vertex.size=10, vertex.color =V(net)$is.TF)
net_d3 <- igraph_to_networkD3(net, group = V(net)$color)
net_d3$nodes$isTF = ifelse(net_d3$node$name %in% TF$AGI, "Hell yeah", "Nah, just a target")
# Create force directed network plot
MyClickScript <- 'alert("You clicked " + d.name);'
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target',  charge =-20,
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
V(net)$is.TF <- ifelse(V(net) %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
TF$AGI
V(net)
TF$AGI
V(net)
load("./Nitrate_igraph_network.RData")
load("./Nitrate_igraph_network.RData")
V(net)$is.TF <- ifelse(V(net) %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
V(net)
a <- TF$AGI
b <- V(net)
b <- as.vectorV(net)
b <- as.vector(V(net))
load("./Nitrate_igraph_network.RData")
b <- as.vector(V(net))
b
V(net)
b <- V(net)$name
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
net_d3 <- igraph_to_networkD3(net, group = V(net)$is.TF)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20,
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.schemeDark2",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.schemeDark2",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "schemeDark2",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.scaleOrdinal(d3.schemeDark2);",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.scaleOrdinal(d3.schemeCategory2);",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.scaleOrdinal(d3.schemeCategory20);",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
net_d3 <- igraph_to_networkD3(net, group = V(net)$is.TF)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20, colourScale = "d3.scaleOrdinal(d3.schemeCategory10);",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
library(networkD3)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
plot.igraph(net, vertex.size=10, vertex.color =V(net)$is.TF)
net_d3 <- igraph_to_networkD3(net, group = V(net)$color)
net_d3$nodes$isTF = ifelse(net_d3$node$name %in% TF$AGI, "Hell yeah", "Nah, just a target")
# Create force directed network plot
MyClickScript <- 'alert("You clicked " + d.name);'
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target',  charge =-20,
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
net_d3 <- igraph_to_networkD3(net, group = V(net)$is.TF)
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target', charge =-20,colourScale = "d3.scaleOrdinal(d3.schemeCategory10);",
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
library(visNetwork)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
data <- toVisNetworkData(net)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px")
visNetwork(nodes = data$nodes, edges = data$edges, height = "1000px")
visNetwork(nodes = data$nodes, edges = data$edges, height = "400px")
visNetwork(nodes = data$nodes, edges = data$edges)
visNetwork(nodes, edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
data$nodes
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
data$nodes$size <- data$nodes$size*30
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
data$nodes$size <- data$nodes$size*20
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
data <- toVisNetworkData(net)
data$nodes$size <- data$nodes$size*20
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
data <- toVisNetworkData(net)
data$nodes$size <- data$nodes$size*30
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "forceAtlas2Based",
forceAtlas2Based = list(gravitationalConstant = -500))
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut")
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1, minVelocity=1)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1, minVelocity=0.2)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1, minVelocity=0.2, repulsion = -10000)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
data <- toVisNetworkData(net)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "barnesHut", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
BiocManager::install("GENIE3")
library(GENIE3)
data <- read.csv("quantifFiles/QuantifGenes.csv", h = T, sep = ',')
rownames(data) <- data$Gene
genes = which(!(grepl("__", rownames(data))))
not_quant = data[which((grepl("__", rownames(data)))),]
data = data[genes,grepl('R', colnames(data))]
keep <- rowSums(data) >= 10
data <- data[keep,]
group <- sapply(colnames(data), getLabel, with.rep = F)
colnames(data) <- sapply(colnames(data), getLabel)
specie = "At"
clusteredGenes <- clustering(sharedBy3, data)
intersect(set(TF$AGI), set(sharedBy3))
library(usethis)
library(set)
intersect(TF$AGI,sharedBy3)
mat <- GENIE3(normalized.count[sharedBy3,], regulators = intersect(TF$AGI,sharedBy3), targets = NULL,treeMethod = "RF", K = "sqrt", nTrees = 1000, nCores = 5,verbose = T)
load("./normalized.count_At.RData")
mat <- GENIE3(normalized.count[sharedBy3,], regulators = intersect(TF$AGI,sharedBy3), targets = NULL,treeMethod = "RF", K = "sqrt", nTrees = 1000, nCores = 5,verbose = T)
View(mat)
library(corrplot)
corrplot(mat)
mat.values
hist(mat)
getLinkList(mat)
hist(mat)
getLinkList(mat, thr = 0.1)
g <- graph.data.frame(edge_listsi,directed = F)
links <- getLinkList(mat, thr = 0.1)
g <- graph.data.frame(links, directed = F)
View(g)
plot.igraph(g)
plot.igraph(g, vertex.size=5)
plot.igraph(g, vertex.size=5, vertex.cex=5)
plot.igraph(g, vertex.size=5, vertex.label.cex=5)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.5)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1)
netStats(g)
links <- getLinkList(mat, thr = 0.05)
g <- graph.data.frame(links, directed = F)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1)
netStats(g)
links <- getLinkList(mat, thr = 0.1)
g <- graph.data.frame(links, directed = F)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1)
links <- getLinkList(mat, thr = 0.07)
g <- graph.data.frame(links, directed = F)
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
V(g)$is.TF <- ifelse(V(g)$name %in% TF$AGI, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
V(g)$is.TF
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
V(g)$color <- ifelse(V(g)$name %in% TF$AGI, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
hist(mat)
links <- getLinkList(mat, thr = 0.07)
g <- graph.data.frame(links, directed = T)
V(g)$color <- ifelse(V(g)$name %in% TF$AGI, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
g <- graph.data.frame(links, directed = F)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% TF$AGI, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
V(g)$name
mat2 <- GENIE3(normalized.count, regulators = TF$AGI, targets = sharedBy3 ,treeMethod = "RF", K = "sqrt", nTrees = 1000, nCores = 5,verbose = T)
mat2 <- GENIE3(normalized.count, regulators = unique(TF$AGI), targets = sharedBy3 ,treeMethod = "RF", K = "sqrt", nTrees = 1000, nCores = 5,verbose = T)
mat2 <- GENIE3(normalized.count, regulators = intersect(unique(TF$AGI), rownames(normalized.count)), targets = sharedBy3 ,treeMethod = "RF", K = "sqrt", nTrees = 1000, nCores = 5,verbose = T)
mat <- mat2
hist(mat)
links <- getLinkList(mat, thr = 0.02)
V(g)$color <- ifelse(V(g)$name %in% TF$AGI, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
quantile(mat, 0.9)
quantile(mat, 0.1)
quantile(mat, 0.99)
quantile(mat, 0.999)
genie <- function(data, regressors=NA, targets = NA, nTrees=1000, nCores=5){
mat <- GENIE3(data, regulators = intersect(rownames(data),regressors), targets = targets ,treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
hist(mat)
links <- getLinkList(mat, thr = quantile(mat, 0.999))
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% regressors, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
}
genie <- function(data, regressors=NA, targets=NA, nTrees=1000, nCores=5){
mat <- GENIE3(data, regulators = intersect(rownames(data),regressors), targets = targets ,treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
hist(mat)
links <- getLinkList(mat, thr = quantile(mat, 0.999))
g <- graph.data.frame(links, directed = F)
V(g)$color <- ifelse(V(g)$name %in% regressors, 1, 0)
plot.igraph(g, vertex.size=5, vertex.label.cex=0.1, color = V(g)$is.TF)
netStats(g)
}
geneie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3)
genie(normalized.count, regressors = intersect(TF$AGI,sharedBy3), targets = sharedBy3)
library(networkD3)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
plot.igraph(net, vertex.size=10, vertex.color =V(net)$is.TF)
setwd("~/Documents/Network_visualisation")
library(networkD3)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
library(networkD3)
library(stringr)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
library(igraph)
load("./CO2_igraph_network.RData")
TF <- read.table("TFs_PlnTFDB.txt", h=T, sep = '\t')
TF$AGI <- str_split_fixed(TF$Protein.ID, '\\.', 2)[,1]
V(net)$is.TF <- ifelse(V(net)$name %in% TF$AGI, 1, 0)
print(paste(sum(as.numeric(V(net)$is.TF)) , "genes are TFs"))
plot.igraph(net, vertex.size=10, vertex.color =V(net)$is.TF)
net_d3 <- igraph_to_networkD3(net, group = V(net)$color)
net_d3$nodes$isTF = ifelse(net_d3$node$name %in% TF$AGI, "Hell yeah", "Nah, just a target")
MyClickScript <- 'alert("You clicked " + d.name);'
forceNetwork(Links = net_d3$links, Nodes = net_d3$nodes,
Source = 'source', Target = 'target',  charge =-20,
NodeID = 'name', Group = 'group', opacity = 0.8, fontSize = 12, zoom = T, bounded = T, clickAction = MyClickScript)
shiny::runApp(system.file("shiny", package = "visNetwork"))
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "replusion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "repulsion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "200px", width = "100px") %>%
visPhysics(solver = "repulsion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "100%", width = "100%") %>%
visPhysics(solver = "repulsion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "repulsion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 0.1, minVelocity=0.2, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 0.1, minVelocity=0.1, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 0.1, minVelocity=1, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 0.05, minVelocity=1, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=0.1, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 20, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 100, stabilization = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 100, stabilization = T)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size <- data$nodes$size*10
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = T)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visIgraphLayout()
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "barnesHut", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 50, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 100, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 10, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 15, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 12, stabilization = F)
load("./CO2_igraph_network.RData")
library(visNetwork)
data <- toVisNetworkData(net)
#visNetwork(nodes = data$nodes, edges = data$edges)
data$nodes$size
# visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
#  visPhysics(solver = "hierarchicalRepulsion", timestep = 1, minVelocity=1, maxVelocity = 50, stabilization = F)
visNetwork(nodes = data$nodes, edges = data$edges, height = "500px", width = "100%") %>%
visEdges(smooth = FALSE) %>% visPhysics(solver = "forceAtlas2Based", timestep = 1, minVelocity=10, maxVelocity = 10, stabilization = F)
